---
import type { Page, GetStaticPaths } from 'astro'

import { type CollectionEntry } from 'astro:content'
import { getCollection, render } from 'astro:content'
// import ListLayout from "@/layouts/ListLayout.astro";
import { ITEMS_PER_PAGE } from '@/consts'
import { excludeDrafts, sortBlogPosts } from '@/functions'
import ListWithTagsLayout from '@/layouts/ListWithTagsLayout.astro'
import { useTranslations } from '@/i18n'

const t = useTranslations()

interface Props {
  page: Page<CollectionEntry<'blog'>>
  entry: CollectionEntry<'tags'>
}

export const getStaticPaths = (async ({ paginate }) => {
  const tags = await getCollection('tags')
  const posts = await getCollection('blog', excludeDrafts).then(sortBlogPosts)

  return tags.flatMap((entry) => {
    const tagPosts = posts.filter((post) =>
      post.data.tags.some(({ id }) => id === entry.id)
    )
    return paginate(tagPosts, {
      pageSize: ITEMS_PER_PAGE,
      params: { id: entry.id },
      props: { entry },
    })
  })
}) satisfies GetStaticPaths

const { page, entry } = Astro.props
const { Content } = await render(entry)

let robots
let titleTemplate = ''
if (page.currentPage > 1) {
  // Ask search engines to not index paginated pages
  robots = 'noindex,follow'
  titleTemplate = t('seo.pagination.page', { page: `${page.currentPage}` }) // `%s - Page ${page.currentPage}`;
}
---

<ListWithTagsLayout
  title={entry.data.name}
  description={entry.data.description}
  {page}
  {robots}
  {titleTemplate}
>
  <Content />
</ListWithTagsLayout>
