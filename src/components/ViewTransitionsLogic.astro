---
import { ViewTransitions } from 'astro:transitions'
import { getCollection } from 'astro:content'
import { sortBlogPosts, excludeDrafts } from '@/functions'
import { NAVIGATION, ITEMS_PER_PAGE } from '@/consts'

const navIndices = NAVIGATION.map(({ href }) => href)
const postIndices = await getCollection('blog', excludeDrafts)
  .then(sortBlogPosts)
  .then((posts) => posts.map(({ slug }) => slug))
const postPages = Math.ceil(postIndices.length / ITEMS_PER_PAGE)
---

<ViewTransitions />
<script
  define:vars={{ navIndices, postIndices, postPages }}
  type="module"
  is:inline
>
  // The view transition logic implements a sliding effect on navigation.
  // The pages are placed in a virtual stack, each page has an index.
  // When navigating to a higher index page, it slides from right to left.
  // When navigating to a lower index page, it slides from left to right.
  // When navigating to the same page, the view transition is cancelled.
  // The index of the pages are as follows:
  // - 0: the home page
  // - from 0 to 0.5: the post pagination (sorted by page number)
  // - from 0.5 to 1: the post content (sorted by publication date)
  // - from 1: the other top pages (apps, talks...)
  document.addEventListener('astro:before-preparation', (ev) => {
    const getIndex = (pathname) => {
      // Remove the last `/` if not the root path.
      if (pathname.length > 1 && pathname.slice(-1) === '/') {
        pathname = pathname.slice(0, -1)
      }

      // For links from top nav bar, return an integer from 0 to x (where x is the number of top nav links).
      const navIndex = navIndices.findIndex((href) => pathname === href)
      if (navIndex >= 0) {
        return navIndex
      }

      // For posts, return an index in the (0.5, 1) interval based on the publication date.
      const postIndex =
        0.5 +
        (postIndices.findIndex((href) => pathname === `/posts/${href}`) + 1) /
          (postIndices.length + 1) /
          2

      if (postIndex > 0.5) {
        return postIndex
      }

      // For posts pagination, return an index in the (0, 0.5) interval based on the page number.
      const pageNumber = parseInt(pathname.substring(7), 10) || 0
      const pageIndex = 0 + (pageNumber + 1) / (postPages + 1) / 2

      return pageIndex
    }

    const { from, to } = ev
    const fromIndex = getIndex(from.pathname)
    const toIndex = getIndex(to.pathname)

    // Cancel the view transition if clicking on a link to the current page.
    if (fromIndex === toIndex) {
      ev.preventDefault()
      return
    }

    if (fromIndex > toIndex) {
      ev.direction = 'back'
    }
  })
</script>
